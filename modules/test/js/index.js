function autoCheckForOtherAnswer(element){
	var siblings = $(element).siblings();
	var checkbox = $(siblings[0]);
	if (element.value.length > 0) checkbox.setAttribute('checked',true);
	else checkbox.removeAttribute('checked');
}

function Timer(startTime, stopTime, displayFunction, ringFunction)
{
	this.second = 1000;

	this.setStartTime = function(startTime) {
		this.startTime = startTime;
		this.currentTime = startTime;
	};

	this.setStopTime = function(stopTime) {
		this.stopTime = stopTime;
	};

	this.pause = function() {
		if (this.intervalPointer != null) {
			clearInterval(this.intervalPointer);
			this.intervalPointer = null;
		}
	};

	this.isExpired = function() {
		return this.expired;
	};

	this.toString = function () {
		var diff = this.stopTime-this.currentTime;
		var min_to_sec=60;
		var hour_to_sec=60*60;

		var ore = Math.floor(diff/hour_to_sec);
		diff -= ore*hour_to_sec;
		var minuti = Math.floor(diff/min_to_sec);
		diff -= minuti*min_to_sec;
		var secondi = diff;

		return zeroFill(ore,2)+":"+zeroFill(minuti,2)+":"+zeroFill(secondi,2);
	};

	this.ring = ringFunction;

	this.display = displayFunction;

	this.clock = function () {
		this.display(this.toString());
		if (this.stopTime - this.currentTime <=0) {
			this.expired = true;
			this.stop();
			this.ring();
		}
		else this.expired = false;
		this.currentTime++;
	};

	this.start = function()
	{
		if (this.startTime >= this.stopTime) {
			this.stopTime = this.startTime;
		}
		this.currentTime = this.startTime;
		this.display(this.toString());
		this.resume();
	};

	this.resume = function() {
		this.pause();
		this.intervalPointer = setInterval("clockTimer();",this.second);
	};

	this.stop = function () {
		this.pause();
	};

	this.intervalPointer = null;
	this.expired = false;
	this.setStartTime(parseInt(startTime));
	this.setStopTime(parseInt(stopTime));
}

var timer = null;

function testTimer(startTime,stopTime,message) {
	timer = new Timer(startTime,stopTime,
		function (value) {
			$$('.absoluteTimer')[0].setStyle({display: 'block'});
			$$('.absoluteTimer')[0].innerHTML = value;
		},
		function () {
			alert(message);
			$('testForm').submit();
		}
	);
}

function clockTimer() {
	if (timer != null) {
		timer.clock();
	}
}

Event.observe(window, 'load', function() {
	if (timer != null) {
		timer.start();
	}
	// install flowplayer to an element with CSS class "ADAflowplayer"
	// generated by the media_viewing_classes if it's needed
	if ($j(".ADAflowplayer").length > 0) $j(".ADAflowplayer").flowplayer();
	
	// if it's in preview mode disable some elements
	if ($j('#preview').length > 0)
	{
		if (timer != null) timer.stop();
		// disable links and menus on the menu bar...
		$j('#menu a').removeAttr('href');
		$j('#menu li').removeAttr('onclick');
		// ...and make it fade out a little bit
		$j('#menu').animate( {opacity:0.5} );
		
		// disable all elements in all forms...
		$j('form :input').attr('disabled','disabled');
		// ...and make them fade out a little bit 
		$j('form :input').animate( {opacity:0.5} );
		
		$j('html').css ('border','3px solid red');
		$j('html').css ('margin','5px');
	}
		
	// if there's a .stimolo div with more than maxCharCount
	// characters apply it the custom scrollbar
	if ($j('.stimolo-field').length > 0)
	{
		var maxCharCount = 680;
		// var maxCharCount = 0;
		var i=-1;
		$j('.stimolo-field').each( function() {
			++i;
			var stimoloObj = $j(this);
			var stimoloText = stimoloObj.text().trim();
			var hasMedia = ($j(this).find('.media').length>0);
			
			if (!hasMedia && stimoloText.length >= maxCharCount) {
				 /* NOTE: These work with div original size and content, therefore
				          MUST be called BEFORE the customScrollbar is applied
				 */
				 addStimoloExpander(stimoloObj,i);
				 addStimoloZoomer  (stimoloObj,i);
				 
				 // must do a restyling on current element and apply the customScrollbar
				 stimoloObj.addClass('stimoloWithScrollbar');			 
				 stimoloObj.mCustomScrollbar({
				        scrollButtons:{ enable:true },
				        theme:"dark-2",
				        scrollInertia:450 });
				 
			}
			else if (!hasMedia && stimoloText.length > 0) {
				stimoloObj.addClass('stimoloWithScrollbar');
				$j('.stimoloWithScrollbar').css('height','auto');
			}
			else { 
				// remove the class to make it look like all
			    // the other elements in the page.
				stimoloObj.toggleClass ('stimolo-field');
			}
			stimoloObj.css('visibility','visible');
		});
	}
});

function addStimoloExpander (stimoloObj, index)
{
	var expandLbl;
	var reduceLbl;
	
	 // get click to expand translated label if it's there
	 if ($j('#clickToExpandLbl').length>0 ) expandLbl = $j('#clickToExpandLbl').text();
	 else expandLbl = 'Click To Expand';
	 
	// get click to reduce translated label if it's there
	 if ($j('#clickToReduceLbl').length>0 ) reduceLbl = $j('#clickToReduceLbl').text();
	 else reduceLbl = 'Click To Expand';
	 
	 // add a click to expand / reduce link and its onclick handler
	 stimoloObj.parent().append ("<div class='expandStimolo "+index+"'>"+ expandLbl +"</div>");
	 $j('.expandStimolo.'+index).on('click',function(event){
			if (stimoloObj.hasClass('stimoloWithScrollbar'))
			{
				action = function(element) { stimoloObj.mCustomScrollbar ('disable', true);
											 $j(element).html(reduceLbl);
											 $j(element).toggleClass('expandStimolo');
											 $j(element).toggleClass('reduceStimolo'); };
			} 
			else
			{
				action = function(element) { stimoloObj.mCustomScrollbar ('update'); 
											 $j(element).html(expandLbl);
											 $j(element).toggleClass('expandStimolo');
											 $j(element).toggleClass('reduceStimolo'); };
			}					
			stimoloObj.toggleClass( "stimoloWithScrollbar", 500 , function() { action(event.target); });
	 });
}

function addStimoloZoomer(stimoloObj, index)
{
	 var origWidth = stimoloObj.width();		
	 var origHeight = stimoloObj.height();
	
	 // get click to zoom translated label if it's there
	 if ($j('#clickToZoomLbl').length>0 ) label = $j('#clickToZoomLbl').text();
	 else label = 'Click To Zoom';
	 
	 // add a click to zoom link and its onclick handler			 
	 stimoloObj.parent().append ("<div class='zoomStimolo "+index+"'>"+ label +"</div>");
	 $j('.zoomStimolo.'+index).on('click',
			 function(){
			 	var wide = ($j(window).width() / 2) - (origWidth / 2);
		        var high = ($j(window).height() / 2) - (origHeight / 2);			
		        var scrollTop = $j(window).scrollTop();

		    	// add close button
		    	$j('body').append("<div id='stimoloBox'><a class='closeit'>X</a></div>");
		    	// the condition is to have only one bgCover for all the stimolo box
		    	if (!$j('.bgCover').length) $j('body').append('<div class="bgCover">&nbsp;</div>');
		        
			    // setup #stimoloBox content and css
		    	var boxDisplacement = Math.abs (parseInt ($j('a.closeit').css('top'))) + 
		    						  parseInt ($j('a.closeit').css('border-top-width'));
		    	var realTop = (high + scrollTop > boxDisplacement) ? high + scrollTop : scrollTop+boxDisplacement;
		    	// if the realTop falls above the current scroll position
		    	if (realTop < scrollTop) realTop = scrollTop + boxDisplacement;
		    	
		    	/**
		    	 * .find('.mCSB_container') should be safe, because if the
		    	 * zoomer is visible, the div must have the custom scrollbar
		    	 */
		        $j('#stimoloBox')
		        	.append(stimoloObj.find('.mCSB_container').html())
		        	.css({
			            top:  parseInt(realTop) + 'px',
			            left: parseInt(wide) + 'px',
			            width : origWidth + 'px',
			            display: 'none',
			            visibility: 'visible',
			          });
		        
		    	// setup overlay height
		        var bgHeight = $j(document).height();
		        if (realTop + $j('#stimoloBox').height() > $j(document).height() )
		        	bgHeight += realTop + 
		        				$j('#stimoloBox').height() - 
		        				$j(document).height() + 
		        				parseInt($j('#stimoloBox').css('padding-top')) +
		        				parseInt($j('#stimoloBox').css('padding-bottom')) +
		        				parseInt($j('#stimoloBox').css('border-top-width')) +
		        				parseInt($j('#stimoloBox').css('border-bottom\-width'));
		        
		        // add overlay with css and onclick handler
		        $j('.bgCover').css({
						display:'block',
						position: 'absolute',
						top:0,
						left:0,
						zIndex: 900,
						width: $j(window).width(),
						height: parseInt(bgHeight)
						}).on('click', function () { $j('a.closeit').click(); });
		 
		        // close button onclick handler
		        $j('a.closeit').on('click', function(){
			        $j('#stimoloBox').fadeOut( function() { $j('#stimoloBox').remove(); } );
			        $j('.bgCover').animate( {opacity:0} , function() { $j('.bgCover').remove(); });
			    });
		        // it's all set, animate new elements
			    $j('#stimoloBox').fadeIn();
			    $j('.bgCover').css({opacity:0}).animate( {opacity:0.5, backgroundColor:'#000'} );
		 });	
}

/**
 * global var set by the DFSTestNavigationBar generated link
 * to force the saveTest method to be called in case of
 * activity type (see also activity.class.inc.php)
 */
var unloadParam='';

Event.observe(window, 'unload', function() {
	new Ajax.Request( document.URL, { method: 'get', parameters: { unload : unloadParam }, asynchronous:false });
});

function move(e,id_nodo,direction) {
	var loc = window.location.pathname;
	var dir = loc.substring(0, loc.lastIndexOf('/'));
	$j.ajax({
		url: dir+'/move.php?id_nodo='+id_nodo+'&direction='+direction,
		dataType: 'text',
		async: false,
		success: function(data) {
			if (data == '1') {
				var li = $j(e).closest('li');
				var span_order = li.find('.span_order');
				if (direction == 'up') {
					var alt = li.prev();
					alt.before(li.detach());
					span_order.text(parseInt(span_order.text())-1);
					alt.find('.span_order').text(parseInt(alt.find('.span_order').text())+1);
				}
				else if (direction == 'down') {
					var alt = li.next();
					alt.after(li.detach());
					span_order.text(parseInt(span_order.text())+1);
					alt.find('.span_order').text(parseInt(alt.find('.span_order').text())-1);
				}

				var offset = li.offset().top;
				var height = $j(window).height();
				var scrollTop = $j(window).scrollTop();
				if ((direction == 'down' && offset > scrollTop+height) || (direction == 'up' && offset < scrollTop+height)) {
					$j(window).scrollTop(offset);
				}
			}
		}
	});
}

document.write('<script type="text/javascript" src="js/commons.js"></script>');

function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

var domReady = false;
function confirmSubmit() {
	if (!domReady) {
		return false;
	}

	var numCheckBoxChecked = 0;
	var answers = {};
	var res = 0;
	$j('[name^="question["]').each(function (index,e) {
		var isCommonAnswer = true;
		if ($j(e).closest('.answer_cloze_slot_test, .answer_cloze_erase_test, .answer_cloze_highlight_test, .answer_cloze_multiple_test').length === 1) {
			isCommonAnswer = false;
		}

		if (isCommonAnswer) {
			var tag = $j(e).prop('tagName').toLowerCase();
			var type = $j(e).attr('type');
			var name = $j(e).attr('name');
			var matches = name.match(/\[([^\]]+)\]\[([^\]]+)\]\[(answer|attachment|extra|other)\]/);
			var multiple = (name.search(/\[answer\]\[[0-9]*\]$/)!=-1)?true:false;
			var topic = parseInt(matches[1]);
			var question = parseInt(matches[2]);

			var extra = false;
			var other = false;
			if (tag == 'textarea' || tag == 'select') {
				type = tag;
			}
			else if (name.indexOf("attachment") != -1) {
				type = 'file';
			}
			else if (name.indexOf("extra") != -1) {
				extra = true;
			}
			else if (name.indexOf("other") != -1) {
				other = true;
			}
			else if ($j(e).attr("data-must")>0) {
				type = 'empty';
			}
			

			var v = false;
			switch(type) {
				case 'empty':
					v = true;
				break;
				case 'radio':
				case 'checkbox':
					if ($j(e).prop('checked') && 'null' != $j(e).val()) {
						// multiple checkbox is considered as
						// answered if at least the number of items hold in the <span id='must-data_<question>'> are checked
						if (type=='checkbox' && ++numCheckBoxChecked>=parseInt($j('#must-data_'+question).html())) v = true;
						else if (type=='radio') v = true;
					}
				break;
				default:
				case 'textarea':
				case 'select':
				case 'hidden':
				case 'text':
				case 'file':
					if ($j(e).val().length > 0) {
						v = true;
					}
				break;
			}

			if (answers[topic] == undefined) {
				answers[topic] = {};
			}
			if (answers[topic][question] == undefined) {
				answers[topic][question] = {};
			}

			if (!extra) {
				if (other) {
					var sibling = $j(e).siblings('input');
					if (sibling
						&& sibling.attr('name').indexOf("answer") != -1
						&& sibling.prop('checked')
						&& (sibling.attr('type') == 'checkbox' || sibling.attr('type') == 'radio')) {
						answers[topic][question][index-1] = ($j(e).val().length > 0)?true:false;
					}
				}
				/**
				 * giorgio 17/dec/2013
				 * if it's a checkbox, the array is not need (see above)
				 */
				else if (multiple && type!='checkbox') {
					answers[topic][question][index] = v;
				}
				else {
					answers[topic][question][0] = answers[topic][question][0] || v;
				}
			}
		}
	});
	
	/**
	 * giorgio 08/gen/2014
	 * 
	 * questionMultipleCloze.class.inc.php has its own counting algorithm
	 * 
	 * The number of answer a user must give is passed by the php in the
	 * div having id=must-data_<question_number>
	 * 
	 */
	$j('.answer_cloze_multiple_test').each(function (index,e) {
		var givenAnswers  = 0;
		var neededAnswers = 0;
		
		var name = $j(e).find('[name^="question["]').attr('name');
		if (typeof name == 'undefined') return;
		var matches = name.match(/\[([^\]]+)\]\[([^\]]+)\]\[(answer|attachment|extra|other)\]/);
		var topic = parseInt(matches[1]);
		var question = parseInt(matches[2]);
		
		if ($j('#must-data_'+question).length >0) neededAnswers = parseInt($j('#must-data_'+question).html());
		
		if (answers[topic] == undefined) {
			answers[topic] = {};
		}
		if (answers[topic][question] == undefined) {
			answers[topic][question] = {};
		}
		
		$j(e).find('[name^="question["]').each(function (questionIndex,questionEl) {
			if ($j(questionEl).val().length>0) givenAnswers++;
		});
		
		if (typeof answers[topic][question][index] == 'undefined') answers[topic][question][index] = (givenAnswers >= neededAnswers);
		answers[topic][question][index] = answers[topic][question][index] && (givenAnswers >= neededAnswers);
	});
	
	//check for cloze erase and highlight test
	/**
	 * The number of answer a user must give is passed by the php in the
	 * div having class=must-data-question[topic][question]
	 */
	$j('.answer_cloze_erase_test, .answer_cloze_highlight_test').each(function (index,e) {
		var topic = $j(e).closest('[id^="liTopic"]').attr('id').replace('liTopic','');
		topic = parseInt(topic);
		if (answers[topic] == undefined) {
			answers[topic] = {};
		}

		var question = $j(e).closest('[id^="liQuestion"]').attr('id').replace('liQuestion','');
		question = parseInt(question);
		if (answers[topic][question] == undefined) {
			answers[topic][question] = {};
		}
		
		if ($j('span[class="must-data-question\\['+topic+'\\]\\['+question+'\\]"]').length >0) {
			neededAnswers = parseInt($j('span[class="must-data-question\\['+topic+'\\]\\['+question+'\\]"]').html());
		} else {
			neededAnswers = 0;			
		}

		var array = $j(e).find('[name^="question["]');
		var v = true;
		if (parseInt(array.length) < neededAnswers) {
			v = false;
		}
		answers[topic][question][0] = v;
	});

	//check for cloze slot test
	$j('.answer_cloze_slot_test').each(function (index,e) {
		var topic = $j(e).closest('[id^="liTopic"]').attr('id').replace('liTopic','');
		topic = parseInt(topic);
		if (answers[topic] == undefined) {
			answers[topic] = {};
		}

		var question = $j(e).closest('[id^="liQuestion"]').attr('id').replace('liQuestion','');
		question = parseInt(question);
		if (answers[topic][question] == undefined) {
			answers[topic][question] = {};
		}

		var array = $j(e).find('.dragdropBox .draggable');
		var v = false;
		if (array.length === 0) {
			v = true;
		}
		answers[topic][question][0] = v;
	});

	res = true;
	for(var t in answers) {
		for(var q in answers[t]) {
			var r = false;
			/*
			 * if there's more than one answer, cycle them
			 */
			if (Object.keys(answers[t][q]).length > 0) {
				r = true;
				for(var a in answers[t][q]) {
					r = r && answers[t][q][a];
				}				
			}
			res = res && r;
		}
	}

	if (!res) {
		return confirm(confirmEmptyAnswers);
	}
	else return res;
}

document.observe('dom:loaded', function() {
	domReady = true;
});